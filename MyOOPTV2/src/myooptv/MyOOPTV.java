/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package myooptv;

import javax.swing.JButton;
import javax.swing.JComboBox;
import javax.swing.JSlider;

/**
 *
 * @author LeeJaeseok
 */
public class MyOOPTV extends javax.swing.JFrame {

    /**
     * Creates new form MyOOPTV
     */
    MyWatchable[] tvs = null;
    // 추상 클래스를 이용하여 tvs 배열 레퍼런스 변수 생성
    MyWatchable currentTV = null;
    // 현재 선택된 tv를 나타내는 레퍼런스 변수 생성

    public MyOOPTV() {
        initComponents();

        // tvs 배열 초기화
        tvs = new MyWatchable[2];
        tvs[0] = new MyTVModel(lblImage);
        tvs[1] = new MyTVModel2(lblImage);

        // 현재 tv 0번 인덱스(거실 TV)로 초기화
        currentTV = tvs[0];

        // 현재 채널 0번 인덱스(1번 채널)로 초기화
        cmbChannel.setSelectedIndex(0);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btnPowerOn = new javax.swing.JButton();
        cmbChannel = new javax.swing.JComboBox<>();
        sldZoom = new javax.swing.JSlider(JSlider.HORIZONTAL,1,100,100);
        lblZoom = new javax.swing.JLabel();
        lblImage = new javax.swing.JLabel();
        cmbTV = new javax.swing.JComboBox<>();
        cbZoomSync = new javax.swing.JCheckBox();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("MyOOPTV");

        btnPowerOn.setText("Power Off");
        btnPowerOn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPowerOnActionPerformed(evt);
            }
        });

        cmbChannel.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "1", "2", "3", "4", "5" }));
        cmbChannel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbChannelActionPerformed(evt);
            }
        });

        sldZoom.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                sldZoomStateChanged(evt);
            }
        });

        lblZoom.setText("100%");

        lblImage.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblImage.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        cmbTV.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "거실 TV", "서재 TV" }));
        cmbTV.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbTVActionPerformed(evt);
            }
        });

        cbZoomSync.setText("Zoom 연동");
        cbZoomSync.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbZoomSyncActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(cmbChannel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(sldZoom, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(lblZoom)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnPowerOn))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(cbZoomSync)
                        .addGap(18, 18, 18)
                        .addComponent(cmbTV, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(lblImage, javax.swing.GroupLayout.PREFERRED_SIZE, 400, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cmbTV, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cbZoomSync))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lblImage, javax.swing.GroupLayout.PREFERRED_SIZE, 300, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 12, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btnPowerOn)
                            .addComponent(lblZoom))
                        .addComponent(sldZoom, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(cmbChannel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(8, 8, 8))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnPowerOnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPowerOnActionPerformed
        // 파워 버튼이 눌릴 경우
        JButton powerBtn = (JButton) evt.getSource();
        if (currentTV.power) {
            // 파워가 켜져 있을 경우
            powerBtn.setText("Power On");
            // 버튼 텍스트 변경
            currentTV.power = false;
            // 파워 끄기
            lblImage.setIcon(null);
            // 표시되는 이미지 없앰
            cmbChannel.setEnabled(false);
            cmbTV.setEnabled(false);
            sldZoom.setEnabled(false);
        } else {
            // 파워가 꺼져 있을 경우
            powerBtn.setText("Power Off");
            // 버튼 텍스트 변경
            currentTV.power = true;
            // 파워 켜기
            cmbChannel.setEnabled(true);
            cmbTV.setEnabled(true);
            sldZoom.setEnabled(true);
            currentTV.setImage();
            // 표시되는 이미지 세팅
        }
    }//GEN-LAST:event_btnPowerOnActionPerformed

    private void cmbChannelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbChannelActionPerformed
        // 채널 콤보박스 선택을 변경할 경우
        JComboBox cmb = (JComboBox) evt.getSource();
        currentTV.chNo = cmb.getSelectedIndex();
        // 현재 TV의 chNo에 저장
        currentTV.setImage();
        // 표시되는 이미지 세팅
    }//GEN-LAST:event_cmbChannelActionPerformed

    private void sldZoomStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_sldZoomStateChanged
        // Zoom 슬라이더의 상태가 변경될 경우
        JSlider sl = (JSlider) evt.getSource();
        currentTV.zoom = sl.getValue();
        // 현재 TV의 zoom에 슬라이더의 값 저장
        String zoomStr = String.valueOf(currentTV.zoom);
        lblZoom.setText(zoomStr + "%");
        // zoom값(0~100) lblZoom에 백분율 형태로 표시

        currentTV.setZoom(currentTV.zoom);
        // 이미지 크기 세팅
        currentTV.setImage();
        // 표시되는 이미지 세팅
    }//GEN-LAST:event_sldZoomStateChanged

    private void cmbTVActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbTVActionPerformed
        // TV 콤보박스 선택이 변경될 경우
        JComboBox cmb = (JComboBox) evt.getSource();
        int index = cmb.getSelectedIndex();
        // index에 선택된 TV 인덱스 저장
        int zoom = currentTV.zoom;
        // 변경 전 TV의 zoom값 저장
        currentTV = tvs[index];
        // TV 변경
        cmbChannel.setSelectedIndex(currentTV.chNo);
        // 변경된 TV의 채널 인덱스 값으로 채널 콤보박스 선택 변경
        if (cbZoomSync.isSelected()) {
            // Zoom 연동 체크박스가 선택된 경우
            currentTV.zoom = zoom;
            // 현재 TV의 zoom값 변경 전 TV의 zoom값으로 변경
            currentTV.setZoom(currentTV.zoom);
            // 이미지 크기 세팅
            currentTV.setImage();
            // 표시되는 이미지 세팅
        } else {
            // Zoom 연동 체크박스가 선택되지 않은 경우
            sldZoom.setValue(currentTV.zoom);
            // 현재 TV의 zoom값으로 슬라이드 변경
        }

    }//GEN-LAST:event_cmbTVActionPerformed

    private void cbZoomSyncActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbZoomSyncActionPerformed

    }//GEN-LAST:event_cbZoomSyncActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MyOOPTV.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MyOOPTV.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MyOOPTV.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MyOOPTV.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MyOOPTV().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnPowerOn;
    private javax.swing.JCheckBox cbZoomSync;
    private javax.swing.JComboBox<String> cmbChannel;
    private javax.swing.JComboBox<String> cmbTV;
    private javax.swing.JLabel lblImage;
    private javax.swing.JLabel lblZoom;
    private javax.swing.JSlider sldZoom;
    // End of variables declaration//GEN-END:variables
}
